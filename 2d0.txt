sound:
    maybe it'll make sense to go through the whole list of the messages,
    so that it'll be more flexible and you wouldn't need to place a new 
    message riiiight there and there only.
    For now:                Cancel: too expensive

    I don't know if it's a good idea to make separate routines for adding
    messages that are in the poll and for the sequencer update (speaking
    of byte limitation). Speaking structure-wise, I think that it's
    logical for now:        Separate routines for each step

    thougths on the sequencer: it'll probably be more logical and right 
    (in terms of the logic of the sequencer: it generates a SEQUENCE of
    mesages) to allocate enough memory for each message separately, 
    rather than looping through the message list and finding if the 
    beat that is being generated is in the list or not, and then putting
    it as a new message.
    So for now:             allocate enough memory for each beat message
    

    remake the instrument offset logic
    filter. Butterworth filter. please.
    structure of the code. maybe create folder just with data that is 
        necessary for this part of the project?
    comment the code. please. I beg you.
    resolve code duplication in Sound.AddSequencer and Sound.NewMessage
    andlyze the data usage with 2 separate lists and 1 list (for sequencer)
    make LFO
    separate the data into initialized and uninitialized
    think of adding multiple oscillators to one instrument (after implementing the filter) 

    make new things work!!!! (currently: 
    lfos)
    unison reduce code
    reverb do not yet, leave until later. implement if vital
    
    test filter, then implement 2-channel filter
    look through the volumes: each oscillator(oscillator??) must be in range(1,0)
        & think of the volume of unison
    make interpolate byte?
    for now the lfo for cutoff frequency will not logically use the trigger time, 
        as it will require some logic for the instrument, meaning additional field
        
    make the pitch modulation
    optimize the code where the comments are
    the application of unison can become a separate routine tbh. but the time will tell us

    the frequency is weirdly modified. think.
    the experiments show that the current frequency is dependent on the previous
    direction of the frequency modulation, meaning that in case of reverse linear
    interpotaion the frequency goes down and down, but in case of linear it goes
    up and up. but in case of triangle it goes up and down...
    rewrite pitch modulation
    sound is now resting... (seek by 3.999 in sound_code.asm)
    rewrite messagePollAdd to make it more optimal
    the argument for making a new message for an instrument by copying is sequencer! :)
    keep in mind with sequencers: the message structure has been modified
    resolve problem with envelope lfo
    make routine for attaching the filter to the instrument 
    resolve the problem with transferring unkind message!!

unresolved:
    macro for transferring the pattern to the reverse bit sequence