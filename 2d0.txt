sound:
    maybe it'll make sense to go through the whole list of the messages,
    so that it'll be more flexible and you wouldn't need to place a new 
    message riiiight there and there only.
    For now:                Cancel: too expensive

    I don't know if it's a good idea to make separate routines for adding
    messages that are in the poll and for the sequencer update (speaking
    of byte limitation). Speaking structure-wise, I think that it's
    logical for now:        Separate routines for each step

    thougths on the sequencer: it'll probably be more logical and right 
    (in terms of the logic of the sequencer: it generates a SEQUENCE of
    mesages) to allocate enough memory for each message separately, 
    rather than looping through the message list and finding if the 
    beat that is being generated is in the list or not, and then putting
    it as a new message.
    So for now:             allocate enough memory for each beat message
    

    remake the instrument offset logic
    filter. Butterworth filter. please.
    structure of the code. maybe create folder just with data that is 
        necessary for this part of the project?
    comment the code. please. I beg you.
    resolve code duplication in Sound.AddSequencer and Sound.NewMessage
    andlyze the data usage with 2 separate lists and 1 list (for sequencer)
    make LFO
    separate the data into initialized and uninitialized
    think of adding multiple oscillators to one instrument (after implementing the filter) 

    make new things work!!!! (currently: 
    lfos)
    unison reduce code
    reverb do not yet, leave until later. implement if vital
    
    test filter, then implement 2-channel filter
    look through the volumes: each oscillator(oscillator??) must be in range(1,0)
        & think of the volume of unison
    make interpolate byte?
    for now the lfo for cutoff frequency will not logically use the trigger time, 
        as it will require some logic for the instrument, meaning additional field
        
    make the pitch modulation
    optimize the code where the comments are
    the application of unison can become a separate routine tbh. but the time will tell us

    the frequency is weirdly modified. think.
    the experiments show that the current frequency is dependent on the previous
    direction of the frequency modulation, meaning that in case of reverse linear
    interpotaion the frequency goes down and down, but in case of linear it goes
    up and up. but in case of triangle it goes up and down...
    rewrite pitch modulation
    sound is now resting... (seek by 3.999 in sound_code.asm)
    optimize the procedures (whenever there's pushing, try using other registers)
    try to implement a reverb that sounded okay-ish on sine
    rewrite messagePollAdd to make it more optimal
    the argument for making a new message for an instrument by copying is sequencer! :)
    keep in mind with sequencers: the message structure has been modified
    resolve problem with envelope lfo
    make routine for attaching the filter to the instrument 
    resolve the confusion with IDirectSoundBuffer8 not being able to be declared
    clear the instruments after using them to make a buffer
    finish playing the instruments
    interesting thing noticed while making tom: frequency modulation requires some 
        adjustments in terms of frequency. can look into it, but not now.
    make snare sound and finish the prolongation of the starting track 
    make interpolaters for higher powers
    implement pads, kick, snare
    look at the frequency of the kick
    welp, that's unfortunate. the snare needed multiple oscillators with different 
        envelopes... that's to implement somewhen!! :) (genuinely don't know if that's a word)
    yup, the unison kinda disappointed, but works.
    the sound effect at the end of the start scene is not the planned one, but is interesting. 
        I'll leave it this way, why not?
    would've been great to make b's't time 
    resolve code cannot be generated
    optimize by including only instruments that are used and clear only them
    include sound mastering


graphics:
    rewrite the build
    make transform inside the ShaderMesh and rewrite the routine to draw a mesh(
        about this:
            according to learnopengl the mesh must contain its own:
                position/vertex data: position, normal, texCoords
                VAO, VBO, EBO  ; excessive
            and that is purely logical.
            about textures: the texture must contain the ID and its type(for lighting)
            there must be a routine made for each mesh
            ! the mesh must not contain its transform matrix: an individual mesh object must
    )
    just a thought: maybe add another type of building where the texture 
        is reversed: edges are dark, but the inside is bright?
    maybe make the road white? but definitely make the buildings blue
    try making the update of the scene in draw function 
    think of implementing camera movement more optimally
    think of optimally implementing key controls. thoughts:
        mouse movement can be enabled only in independent spectator mode
        some keys might be allowed in several modes, but their purpose must 
        be different from the independent spectator mode
    look through all th comments and remove unnecessary parts
    upd: the time of the scene duration is not the same. for runner,
        it is doubled, in choice it's track duration times N. only for
        spectator it's the same
    the choice section might have as a scene time the expected maximum of the choice
    implement scene time. and for default, when the buffer has reached the end, play the same buffer.
        there will be some things to think of, like accurate time adjustment (for example, 
        once the buffer has reached the end, start over; when the scene time has reached the end, 
        switch the buffer and xor the current time)  
    when a scene is switched, clear the variables that can be left off of the previous scene:
        for example, movement to the left 
    the clean will be completed once all the necessary variables will be initialized
    current task:
        make switching between scenes based on their time, not buffer time
        add another event for the thread?
        or maybe use 0 value?
    ; the problem with threads is that I would've had to use synchronization tools like
        mutexes to null the current time values, as it would've been possible that it 
        would've taken an old value to calculate the current time value, which would've
        been catastrophic. and I do not have enought time to test how many framws will I 
        lose with mutexes
    make choice logic for the next scene
    it has come to my (yet) thinking mind that the scene switch must be completed based on 
        the current position, not the position of roads.
    lots of code duplication in building a layout. solve
    finish starting spline 
    the graphics code is purely just 0_0
    

general:
    make time calculations for generating music and graphics 



unresolved:
    macro for transferring the pattern to the reverse bit sequence